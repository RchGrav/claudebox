#!/bin/bash
set -euo pipefail
ENABLE_SUDO=false
DISABLE_FIREWALL=false
SHELL_MODE=false
new_args=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --enable-sudo) ENABLE_SUDO=true; shift ;;
        --disable-firewall) DISABLE_FIREWALL=true; shift ;;
        shell) SHELL_MODE=true; shift ;;
        *) new_args+=("$1"); shift ;;
    esac
done
if [[ ${#new_args[@]} -gt 0 ]]; then
    set -- "${new_args[@]}"
else
    set --
fi
export DISABLE_FIREWALL

# Debug output (check environment variable)
if [[ "${VERBOSE:-false}" == "true" ]]; then
    echo "DEBUG: Arguments: $@" >&2
    echo "DEBUG: Number of args: $#" >&2
    echo "DEBUG: ENABLE_SUDO=$ENABLE_SUDO" >&2
    echo "DEBUG: DISABLE_FIREWALL=$DISABLE_FIREWALL" >&2
    echo "DEBUG: SHELL_MODE=$SHELL_MODE" >&2
fi

if [ -f /home/DOCKERUSER/init-firewall ]; then
    /home/DOCKERUSER/init-firewall || true
fi

# Handle sudo access based on --enable-sudo flag
# Note: DOCKERUSER user already has sudoers entry from Dockerfile
if [ "$ENABLE_SUDO" != "true" ]; then
    # Remove sudo access if --enable-sudo wasn't passed
    rm -f /etc/sudoers.d/DOCKERUSER
fi

# Python venv management with flag-based system
if [ -n "${CLAUDEBOX_PROJECT_NAME:-}" ]; then
    CLAUDEBOX_DIR="/home/DOCKERUSER/.claudebox"
    CONFIG_FILE="$CLAUDEBOX_DIR/profiles.ini"
    VENV_DIR="$CLAUDEBOX_DIR/.venv"
    VENV_FLAG="$CLAUDEBOX_DIR/.venv_flag"
    PYDEV_FLAG="$CLAUDEBOX_DIR/.pydev_flag"

    # Check if we need to set up the core Python environment
    if command -v uv >/dev/null 2>&1; then
        # Check if both venv folder and .venv_flag exist
        if [ -d "$VENV_DIR" ] && [ -f "$VENV_FLAG" ]; then
            # Already set up, just ensure activation in shell rc files
            for shell_rc in /home/DOCKERUSER/.zshrc /home/DOCKERUSER/.bashrc; do
                if ! grep -q "source $VENV_DIR/bin/activate" "$shell_rc"; then
                    echo "if [ -f $VENV_DIR/bin/activate ]; then source $VENV_DIR/bin/activate; fi" >> "$shell_rc"
                fi
            done
        else
            # Create venv and activate it
            if [ ! -d "$VENV_DIR" ]; then
                runuser -u DOCKERUSER -- uv venv "$VENV_DIR" || true
            fi
            
            # Create .venv_flag to indicate venv is set up
            if [ -d "$VENV_DIR" ]; then
                touch "$VENV_FLAG"
                chown DOCKERUSER:DOCKERUSER "$VENV_FLAG"
                
                # Add activation to shell rc files
                for shell_rc in /home/DOCKERUSER/.zshrc /home/DOCKERUSER/.bashrc; do
                    if ! grep -q "source $VENV_DIR/bin/activate" "$shell_rc"; then
                        echo "if [ -f $VENV_DIR/bin/activate ]; then source $VENV_DIR/bin/activate; fi" >> "$shell_rc"
                    fi
                done
            fi
        fi

        # Check if Python profile is added and deploy Python dev tools if needed
        if [ -f "$CONFIG_FILE" ] && grep -qE 'python|ml|datascience' "$CONFIG_FILE"; then
            if [ ! -f "$PYDEV_FLAG" ] && [ -d "$VENV_DIR" ]; then
                # Deploy Python dev tools
                runuser -u DOCKERUSER -- bash -c "
                    source $VENV_DIR/bin/activate
                    uv pip install black flake8 mypy pytest ipython jupyter numpy pandas matplotlib seaborn scikit-learn
                " || true
                
                # Create .pydev_flag to indicate Python dev tools are deployed
                if [ $? -eq 0 ]; then
                    touch "$PYDEV_FLAG"
                    chown DOCKERUSER:DOCKERUSER "$PYDEV_FLAG"
                fi
            fi
        fi
    fi
fi

# Symlink creation will be handled after user switch

# Generate DEVELOPER_README.md if profiles have changed
if [ -n "${CLAUDEBOX_PROJECT_NAME:-}" ]; then
    PROFILES_INI="/home/DOCKERUSER/.claudebox/profiles.ini"
    README_FILE="/home/DOCKERUSER/.claudebox/DEVELOPER_README.md"
    CHECKSUM_FILE="/home/DOCKERUSER/.claudebox/.developer_readme_checksum"
    
    if [ -f "$PROFILES_INI" ]; then
        # Calculate current checksum of profiles.ini
        CURRENT_CHECKSUM=$(sha256sum "$PROFILES_INI" | cut -d' ' -f1)
        
        # Check if we need to regenerate
        NEED_REGENERATE=false
        if [ ! -f "$README_FILE" ]; then
            # No README exists yet
            NEED_REGENERATE=true
        elif [ ! -f "$CHECKSUM_FILE" ]; then
            # No checksum file exists
            NEED_REGENERATE=true
        else
            # Compare checksums - use if statement to avoid set -e issues
            STORED_CHECKSUM=""
            if [ -f "$CHECKSUM_FILE" ]; then
                STORED_CHECKSUM=$(cat "$CHECKSUM_FILE")
            fi
            if [ "$CURRENT_CHECKSUM" != "$STORED_CHECKSUM" ]; then
                NEED_REGENERATE=true
            fi
        fi
        
        if [ "$NEED_REGENERATE" = "true" ]; then
            # Run as the docker user, not root
            if runuser -u DOCKERUSER -- generate-tools-readme >/dev/null 2>&1; then
                # Store the checksum only if generation succeeded
                echo "$CURRENT_CHECKSUM" > "$CHECKSUM_FILE"
            fi
        fi
        
        # Create symlink in home directory if README exists and symlink doesn't
        if [ -f "$README_FILE" ] && [ ! -e "/home/DOCKERUSER/DEVELOPER_README.md" ]; then
            ln -s "$README_FILE" "/home/DOCKERUSER/DEVELOPER_README.md"
        fi
    fi
fi

cd /home/DOCKERUSER

# No need for complex exit handlers - just copy after claude exits

if [[ "${SHELL_MODE:-false}" == "true" ]]; then
    # Use runuser to avoid PTY signal handling issues
    if [[ "${CLAUDEBOX_WRAP_TMUX:-false}" == "true" ]]; then
        # For tmux, create an init script that shows logo then starts shell
        cat > /tmp/tmux-init.sh << 'EOF'
#!/bin/bash
source /home/DOCKERUSER/.claudebox/source/lib/common.sh 2>/dev/null
logo_header 2>/dev/null
exec /bin/zsh
EOF
        chmod +x /tmp/tmux-init.sh
        sed -i "s|DOCKERUSER|$DOCKERUSER|g" /tmp/tmux-init.sh
        exec runuser -u DOCKERUSER -- bash -c "source /home/DOCKERUSER/.nvm/nvm.sh && cd /workspace && exec tmux new-session /tmp/tmux-init.sh"
    else
        # For non-tmux, show logo before starting shell
        exec runuser -u DOCKERUSER -- bash -c "source /home/DOCKERUSER/.nvm/nvm.sh && cd /workspace && source /home/DOCKERUSER/.claudebox/source/lib/common.sh 2>/dev/null && logo_header 2>/dev/null; exec /bin/zsh"
    fi
else
    # Claude mode - handle wrapper logic directly here
    if [[ "${1:-}" == "update" ]]; then
        # Special update handling - pass all arguments
        shift  # Remove "update" from arguments
        exec runuser -u DOCKERUSER -- bash -c '
            export NVM_DIR="$HOME/.nvm"
            if [[ -s "$NVM_DIR/nvm.sh" ]]; then
                \. "$NVM_DIR/nvm.sh"
                nvm use default >/dev/null 2>&1 || {
                    echo "Warning: Failed to activate default Node version" >&2
                }
            else
                echo "Warning: NVM not found at $NVM_DIR" >&2
            fi
            
            cd /workspace
            echo "Running update command..."
            
            # Check for stale update lock (older than 5 minutes)
            lock_file="$HOME/.DOCKERUSER/.update.lock"
            if [[ -f "$lock_file" ]]; then
                lock_age=$(( $(date +%s) - $(stat -f %m "$lock_file" 2>/dev/null || stat -c %Y "$lock_file" 2>/dev/null || echo 0) ))
                if [[ $lock_age -gt 300 ]]; then
                    rm -f "$lock_file"
                fi
            fi
            
            # Capture the output of claude update to check if already up to date
            update_output=$(claude update 2>&1)
            echo "$update_output"
            
            # Only run version check if an actual update occurred
            if echo "$update_output" | grep -q "Successfully updated\|Installing update"; then
                echo "Verifying update..."
                claude --version
            fi
        '
    else
        # Regular DOCKERUSER execution
        exec runuser -u DOCKERUSER -- bash -c '
            export NVM_DIR="$HOME/.nvm"
            if [[ -s "$NVM_DIR/nvm.sh" ]]; then
                \. "$NVM_DIR/nvm.sh"
                nvm use default >/dev/null 2>&1 || {
                    echo "Warning: Failed to activate default Node version" >&2
                }
            else
                echo "Warning: NVM not found at $NVM_DIR" >&2
            fi
            
            
            # Create symlink from ~/.claude/commands to ~/.claudebox/commands
            # The ~/.claudebox folder is mounted from the host
            if [ -d "$HOME/.claudebox/commands" ]; then
                if [ ! -e "$HOME/.claude/commands" ]; then
                    ln -s "$HOME/.claudebox/commands" "$HOME/.claude/commands"
                fi
            fi
            
            cd /workspace
            
            # Check if .claude/projects exists and filter out -c/--continue if not
            if [[ ! -d "$HOME/.claude/projects" ]]; then
                # Filter out -c and --continue flags
                filtered_args=()
                skip_next=false
                for arg in "$@"; do
                    if [[ "$skip_next" == "true" ]]; then
                        skip_next=false
                        continue
                    fi
                    
                    case "$arg" in
                        -c|--continue)
                            # Skip this flag
                            ;;
                        *)
                            filtered_args+=("$arg")
                            ;;
                    esac
                done
                
                # Update positional parameters
                set -- "${filtered_args[@]}"
            fi
            
            # If no arguments and stdin is a terminal, run claude in interactive mode
            if [[ "${CLAUDEBOX_WRAP_TMUX:-false}" == "true" ]]; then
                if [[ $# -eq 0 ]] && [[ -t 0 ]]; then
                    tmux new-session claude
                else
                    tmux new-session claude "$@"
                fi
            else
                if [[ $# -eq 0 ]] && [[ -t 0 ]]; then
                    # No arguments - check if in tmux
                    if [[ -n "${TMUX:-}" ]]; then
                        claude /tmux
                    else
                        claude
                    fi
                else
                    # Has arguments - check if in tmux
                    if [[ -n "${TMUX:-}" ]]; then
                        claude "$@" /tmux
                    else
                        claude "$@"
                    fi
                fi
            fi
            
            # After claude exits, copy .claude.json if it was created
            if [[ -f "$HOME/.claude.json" ]] && [[ ! -f "$HOME/.claudebox/${CLAUDEBOX_SLOT_NAME}/.claude.json" ]]; then
                cp "$HOME/.claude.json" "$HOME/.claudebox/${CLAUDEBOX_SLOT_NAME}/.claude.json"
            fi
        ' -- "$@"
    fi
fi
