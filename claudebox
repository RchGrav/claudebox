#!/usr/bin/env bash
set -euo pipefail
cb='
 ██████╗██╗      █████╗ ██╗   ██╗██████╗ ███████╗
██╔════╝██║     ██╔══██╗██║   ██║██╔══██╗██╔════╝
██║     ██║     ███████║██║   ██║██║  ██║█████╗
██║     ██║     ██╔══██║██║   ██║██║  ██║██╔══╝
╚██████╗███████╗██║  ██║╚██████╔╝██████╔╝███████╗
 ╚═════╝╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚══════╝

██████╗  ██████╗ ██╗  ██╗ ------ ┌──────────────┐
██╔══██╗██╔═══██╗╚██╗██╔╝ ------ │ The Ultimate │
██████╔╝██║   ██║ ╚███╔╝  ------ │ Claude Code  │
██╔══██╗██║   ██║ ██╔██╗  ------ │  Docker Dev  │
██████╔╝╚██████╔╝██╔╝ ██╗ ------ │ Environment  │
╚═════╝  ╚═════╝ ╚═╝  ╚═╝ ------ └──────────────┘
'
# Configuration
IMAGE_NAME="claudebox"
DOCKER_USER="claude"
USER_ID=$(id -u)
GROUP_ID=$(id -g)
PROJECT_DIR="$(pwd)"
SCRIPT_PATH="$(realpath "$0")"
CLAUDE_DATA_DIR="$HOME/.claude"
LINK_TARGET="/usr/local/bin/claudebox"
DOCKERFILE="$(mktemp /tmp/claudebox-dockerfile.XXXXXX)"
NODE_VERSION="--lts"

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

check_docker() {
    if ! command -v docker &> /dev/null; then
        return 1  # Docker not installed
    fi

    # Check if docker daemon is running
    if ! docker info &> /dev/null; then
        return 2  # Docker installed but not running
    fi

    # Check if user can run docker without sudo
    if ! docker ps &> /dev/null; then
        return 3  # Docker requires sudo
    fi

    return 0  # Docker is working perfectly
}

# Function to install Docker
install_docker() {
    echo -e "${YELLOW}🐳 Docker is not installed.${NC}"
    echo -e "${CYAN}Would you like to install Docker now? (y/n)${NC}"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo -e "${RED}❌ Docker is required for ClaudeBox. Please install Docker and try again.${NC}"
        echo -e "${YELLOW}Visit: https://docs.docker.com/engine/install/${NC}"
        exit 1
    fi

    echo -e "${BLUE}Installing Docker...${NC}"

    # Detect OS
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS=$ID
    else
        echo -e "${RED}Cannot detect OS. Please install Docker manually.${NC}"
        exit 1
    fi

    case $OS in
        ubuntu|debian)
            echo -e "${YELLOW}🔐 Installing Docker requires sudo privileges...${NC}"

           # Install prerequisites
            sudo apt-get update
            sudo apt-get install -y \
                ca-certificates \
                curl \
                gnupg \
                lsb-release

            # Add Docker's official GPG key
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/$OS/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

            # Set up the repository
            echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$OS \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            # Install Docker Engine
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            ;;

        fedora|rhel|centos)
            echo -e "${YELLOW}Installing Docker requires sudo privileges...${NC}"

            # Install Docker
            sudo dnf -y install dnf-plugins-core
            sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
            sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

            # Start Docker
            sudo systemctl start docker
            sudo systemctl enable docker
            ;;

        arch|manjaro)
            echo -e "${YELLOW}Installing Docker requires sudo privileges...${NC}"
            sudo pacman -S --noconfirm docker
            sudo systemctl start docker
            sudo systemctl enable docker
            ;;

        *)
            echo -e "${RED}Unsupported OS: $OS${NC}"
            echo -e "${YELLOW}Please install Docker manually and run this script again.${NC}"
            echo -e "${YELLOW}Visit: https://docs.docker.com/engine/install/${NC}"
            exit 1
            ;;
    esac

    echo -e "${GREEN}✅ Docker installed successfully!${NC}"

    # Now configure for non-root usage
    configure_docker_nonroot
}

# Function to configure Docker for non-root usage
configure_docker_nonroot() {
    echo -e "${YELLOW}Configuring Docker for non-root usage...${NC}"
    echo -e "${YELLOW}This requires sudo to add you to the docker group...${NC}"

    # Create docker group if it doesn't exist
    if ! getent group docker > /dev/null; then
        sudo groupadd docker
    fi

    # Add current user to docker group
    sudo usermod -aG docker "$USER"

    echo -e "${GREEN}Docker configured for non-root usage!${NC}"
    echo -e "${YELLOW}You need to log out and back in for group changes to take effect.${NC}"
    echo -e "${YELLOW}Or run: ${CYAN}newgrp docker${NC}"
    echo -e "${YELLOW}Then run 'claudebox' again.${NC}"

    # Try to activate the group in current shell
    echo -e "${BLUE}Trying to activate docker group in current shell...${NC}"
    exec newgrp docker
}

# Logo drawing function
logo() {
    while IFS= read -r l; do
        o="" c=""
        for ((i=0;i<${#l};i++)); do
            ch="${l:$i:1}"
            [[ "$ch" == " " ]] && { o+="$ch"; continue; }
            cc=$(printf '%d' "'$ch" 2>/dev/null||echo 0)
            if [[ $cc -ge 32 && $cc -le 126 ]]; then n='\033[33m'
            elif [[ $cc -ge 9552 && $cc -le 9580 ]]; then n='\033[34m'
            elif [[ $cc -eq 9608 ]]; then n='\033[31m'
            else n='\033[37m'; fi
            [[ "$n" != "$c" ]] && { o+="$n"; c="$n"; }
            o+="$ch"
        done
        echo -e "${o}\033[0m"
    done <<< "$cb"
}


# Check Docker installation and permissions
docker_status=$(check_docker; echo $?)

case $docker_status in
    1)
        # Docker not installed - need to install
        install_docker
        ;;
    2)
        # Docker installed but not running - need sudo to start it
        echo -e "${YELLOW}Docker is installed but not running.${NC}"
        echo -e "${YELLOW}Starting Docker requires sudo privileges...${NC}"
        sudo systemctl start docker
        if ! docker info &> /dev/null; then
            echo -e "${RED}Failed to start Docker. Please check your Docker installation.${NC}"
            exit 1
        fi

        # Check if we need to configure non-root access
        if ! docker ps &> /dev/null; then
            configure_docker_nonroot
        fi
        ;;
    3)
        # Docker requires sudo - configure non-root access
        echo -e "${YELLOW}Docker requires sudo. Setting up non-root access...${NC}"
        configure_docker_nonroot
        ;;
esac

# Profile definitions - THE MEGA COLLECTION!
declare -A PROFILES
declare -A PROFILE_DESCRIPTIONS

# C/C++ Development
PROFILES[c]="build-essential gcc g++ gdb valgrind cmake ninja-build clang clang-format clang-tidy cppcheck doxygen libboost-all-dev autoconf automake libtool pkg-config libcmocka-dev libcmocka0 lcov libncurses5-dev libncursesw5-dev"
PROFILE_DESCRIPTIONS[c]="C/C++ Development (compilers, debuggers, analyzers, build tools, cmocka, coverage, ncurses)"

# OpenWRT Development
PROFILES[openwrt]="build-essential gcc g++ make git wget unzip sudo file python3 python3-distutils rsync libncurses5-dev zlib1g-dev gawk gettext libssl-dev xsltproc libelf-dev libtool automake autoconf ccache subversion swig time qemu-system-arm qemu-system-aarch64 qemu-system-mips qemu-system-x86 qemu-utils"
PROFILE_DESCRIPTIONS[openwrt]="OpenWRT Development (cross-compilation, QEMU, build essentials)"

# Rust Development
PROFILES[rust]="curl build-essential pkg-config libssl-dev"
PROFILE_DESCRIPTIONS[rust]="Rust Development (cargo and rustc will be installed separately)"

# Python Development
PROFILES[python]="python3 python3-pip python3-venv python3-dev build-essential libffi-dev libssl-dev python3-setuptools python3-wheel ipython3 black pylint mypy"
PROFILE_DESCRIPTIONS[python]="Python Development (Python 3, pip, venv, linters, formatters)"

# Go Development
PROFILES[go]="wget git build-essential"
PROFILE_DESCRIPTIONS[go]="Go Development (Go will be installed separately)"

# Node.js/JavaScript Development
PROFILES[javascript]="build-essential python3"
PROFILE_DESCRIPTIONS[javascript]="JavaScript/TypeScript Development (Node.js, npm, yarn)"

# Java Development
PROFILES[java]="openjdk-17-jdk maven gradle ant"
PROFILE_DESCRIPTIONS[java]="Java Development (OpenJDK 17, Maven, Gradle, Ant)"

# Ruby Development
PROFILES[ruby]="ruby-full ruby-dev build-essential zlib1g-dev libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev"
PROFILE_DESCRIPTIONS[ruby]="Ruby Development (Ruby, gems, build tools)"

# PHP Development
PROFILES[php]="php php-cli php-fpm php-mysql php-pgsql php-sqlite3 php-curl php-gd php-mbstring php-xml php-zip composer"
PROFILE_DESCRIPTIONS[php]="PHP Development (PHP, Composer, common extensions)"

# Database Tools
PROFILES[database]="postgresql-client mysql-client sqlite3 redis-tools mongodb-clients"
PROFILE_DESCRIPTIONS[database]="Database Tools (PostgreSQL, MySQL, SQLite, Redis, MongoDB clients)"

# DevOps Tools
PROFILES[devops]="docker.io docker-compose kubectl helm terraform ansible awscli"
PROFILE_DESCRIPTIONS[devops]="DevOps Tools (Docker, K8s, Terraform, Ansible, AWS CLI)"

# Web Development
PROFILES[web]="nginx apache2-utils curl wget httpie jq"
PROFILE_DESCRIPTIONS[web]="Web Development Tools (nginx, curl, httpie, jq)"

# Embedded Development
PROFILES[embedded]="gcc-arm-none-eabi gdb-multiarch openocd picocom minicom screen platformio"
PROFILE_DESCRIPTIONS[embedded]="Embedded Development (ARM toolchain, debuggers, serial tools)"

# Data Science
PROFILES[datascience]="python3-numpy python3-pandas python3-scipy python3-matplotlib python3-seaborn jupyter-notebook r-base"
PROFILE_DESCRIPTIONS[datascience]="Data Science (NumPy, Pandas, Jupyter, R)"

# Security Tools
PROFILES[security]="nmap tcpdump wireshark-common netcat-openbsd john hashcat hydra"
PROFILE_DESCRIPTIONS[security]="Security Tools (network analysis, penetration testing)"

# ML/AI Development
PROFILES[ml]="python3-pip python3-dev python3-venv build-essential cmake"
PROFILE_DESCRIPTIONS[ml]="Machine Learning (base tools, Python libs installed separately)"

if [[ "${1:-}" == "profile" ]]; then
    shift
    if [[ $# -eq 0 ]]; then
        echo -e "${CYAN}🎯 Available Profiles:${NC}"
        echo
        for profile in $(printf '%s\n' "${!PROFILE_DESCRIPTIONS[@]}" | sort); do
            echo -e "  ${GREEN}$profile${NC} - ${PROFILE_DESCRIPTIONS[$profile]}"
        done
        echo
        echo -e "${YELLOW}Usage: claudebox profile <name> [<name2> ...]${NC}"
        echo -e "${YELLOW}Example: claudebox profile c python web${NC}"
        exit 0
    fi

    # Install selected profiles
    PACKAGES_TO_INSTALL=""
    SELECTED_PROFILES=()

    for profile in "$@"; do
        if [[ -n "${PROFILES[$profile]:-}" ]]; then
            PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL ${PROFILES[$profile]}"
            SELECTED_PROFILES+=("$profile")
        else
            echo -e "${RED}❌ Unknown profile: $profile${NC}"
            echo -e "${YELLOW}Run 'claudebox profile' to see available profiles${NC}"
            exit 1
        fi
    done

    echo -e "${PURPLE}Installing profiles: ${SELECTED_PROFILES[*]}${NC}"

    # Create temporary container
    TEMP_CONTAINER=$(docker create "$IMAGE_NAME" sleep infinity)
    docker start "$TEMP_CONTAINER" >/dev/null

    # Spinner function
    show_spinner() {
        local pid=$1
        local msg=$2
        local spin='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
        local i=0
        echo -n "$msg "
        while kill -0 $pid 2>/dev/null; do
            printf "\b%s" "${spin:i++%${#spin}:1}"
            sleep 0.1
        done
        echo -e "\b${GREEN}✓${NC}"
    }

    # Update package lists
    docker exec -u root "$TEMP_CONTAINER" apt-get update -qq >/dev/null 2>&1 &
    show_spinner $! "Updating package lists..."

    # Install packages
    docker exec -u root "$TEMP_CONTAINER" bash -c "
        export DEBIAN_FRONTEND=noninteractive
        apt-get install -y -qq $PACKAGES_TO_INSTALL >/dev/null 2>&1
    " &
    show_spinner $! "Installing packages..."

    # Special handling for language-specific tools
    for profile in "${SELECTED_PROFILES[@]}"; do
        case "$profile" in
            rust)
                docker exec -u "$DOCKER_USER" "$TEMP_CONTAINER" bash -c "
                    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y >/dev/null 2>&1
                    source \$HOME/.cargo/env
                    rustup component add clippy rustfmt rust-analyzer >/dev/null 2>&1
                " &
                show_spinner $! "Installing Rust toolchain..."
                ;;
            go)
                docker exec -u root "$TEMP_CONTAINER" bash -c "
                    wget -q https://go.dev/dl/go1.21.5.linux-amd64.tar.gz
                    tar -C /usr/local -xzf go1.21.5.linux-amd64.tar.gz
                    rm go1.21.5.linux-amd64.tar.gz
                    echo 'export PATH=/usr/local/go/bin:\$PATH' >> /etc/profile
                " >/dev/null 2>&1 &
                show_spinner $! "Installing Go..."
                ;;
            javascript)
                docker exec -u "$DOCKER_USER" "$TEMP_CONTAINER" bash -c "
                    source \$HOME/.nvm/nvm.sh
                    npm install -g typescript ts-node eslint prettier webpack vite nodemon pm2 yarn pnpm >/dev/null 2>&1
                " &
                show_spinner $! "Installing Node.js tools..."
                ;;
            python)
                docker exec -u "$DOCKER_USER" "$TEMP_CONTAINER" bash -c "
                    pip3 install --user pipenv poetry virtualenv pytest requests numpy pandas matplotlib jupyterlab >/dev/null 2>&1
                " &
                show_spinner $! "Installing Python tools..."
                ;;
            ml)
                docker exec -u "$DOCKER_USER" "$TEMP_CONTAINER" bash -c "
                    pip3 install --user torch torchvision torchaudio tensorflow scikit-learn transformers datasets >/dev/null 2>&1
                " &
                show_spinner $! "Installing ML libraries..."
                ;;
        esac
    done

    # Clean apt cache
    docker exec -u root "$TEMP_CONTAINER" bash -c "
        apt-get clean >/dev/null 2>&1
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    " >/dev/null 2>&1

    # Commit changes
    docker commit "$TEMP_CONTAINER" "$IMAGE_NAME" >/dev/null &
    show_spinner $! "Saving changes to image..."

    # Cleanup
    docker rm -f "$TEMP_CONTAINER" >/dev/null

    echo -e "${GREEN}Profile installation complete!${NC}"
    exit 0
fi
# Other commands (install, shell, etc.)
if [[ "${1:-}" == "install" ]]; then
    shift
    PACKAGES_TO_INSTALL=("$@")
    if [[ ${#PACKAGES_TO_INSTALL[@]} -eq 0 ]]; then
        echo "Error: No packages specified. Usage: claudebox install <package1> <package2> ..."
        exit 1
    fi

    echo "Installing additional packages: ${PACKAGES_TO_INSTALL[*]}"

    TEMP_CONTAINER=$(docker create "$IMAGE_NAME" sleep infinity)
    docker start "$TEMP_CONTAINER" >/dev/null

    docker exec -u root "$TEMP_CONTAINER" bash -c "
        export DEBIAN_FRONTEND=noninteractive
        apt-get update -qq
        apt-get install -y -qq ${PACKAGES_TO_INSTALL[*]} 2>&1 | grep -v 'invoke-rc.d' | grep -v 'policy-rc.d' || true
        apt-get clean
        rm -rf /var/lib/apt/lists/*
    "

    docker commit "$TEMP_CONTAINER" "$IMAGE_NAME" >/dev/null
    docker rm -f "$TEMP_CONTAINER" >/dev/null

    echo "Packages installed successfully!"
    exit 0
fi

if [[ "${1:-}" == "update" ]]; then
    echo -e "${BLUE}Updating Claude code...${NC}"

    # Create temporary container
    TEMP_CONTAINER=$(docker create "$IMAGE_NAME" sleep infinity)
    docker start "$TEMP_CONTAINER" >/dev/null

    # Step 1: Run claude update to download the update
    docker exec -it -u "$DOCKER_USER" "$TEMP_CONTAINER" bash -c "
        source \$HOME/.nvm/nvm.sh
        nvm use default
        claude update
    "

    # Step 2: Run claude again to apply the update (simulating a restart)
    echo -e "${BLUE}Applying update...${NC}"
    docker exec -it -u "$DOCKER_USER" "$TEMP_CONTAINER" bash -c "
        source \$HOME/.nvm/nvm.sh
        nvm use default
        # Run claude --version to trigger the update application
        claude --version
    "
    # Commit changes back to the image
    docker commit "$TEMP_CONTAINER" "$IMAGE_NAME" >/dev/null
    docker rm -f "$TEMP_CONTAINER" >/dev/null

    echo -e "${GREEN}Claude code update completed and saved to image!${NC}"
    exit 0
fi

# Commands that need to persist changes to the image
PERSISTENT_COMMANDS="config|mcp|migrate-installer|update"

if [[ "${1:-}" =~ ^($PERSISTENT_COMMANDS)$ ]]; then
    # Ensure image exists
    if ! docker image inspect "$IMAGE_NAME" &>/dev/null; then
        echo -e "${RED}Error: ClaudeBox image not found.${NC}"
        echo -e "Run ${GREEN}claudebox${NC} first to build the image."
        exit 1
    fi

    if [[ "${1:-}" == "update" ]]; then
        TEMP_CONTAINER=$(docker create "$IMAGE_NAME" sleep infinity)
        docker start "$TEMP_CONTAINER" >/dev/null

        docker exec -it -u "$DOCKER_USER" "$TEMP_CONTAINER" bash -c "
            source \$HOME/.nvm/nvm.sh
            nvm use default
            claude update"

        docker exec -it -u "$DOCKER_USER" "$TEMP_CONTAINER" bash -c "
            source \$HOME/.nvm/nvm.sh
            nvm use default
            claude --version"

        docker commit "$TEMP_CONTAINER" "$IMAGE_NAME" >/dev/null
        docker rm -f "$TEMP_CONTAINER" >/dev/null
    else
        # Other commands - just run them
        TEMP_CONTAINER=$(docker create "$IMAGE_NAME" sleep infinity)
        docker start "$TEMP_CONTAINER" >/dev/null

        docker exec -it -u "$DOCKER_USER" "$TEMP_CONTAINER" \
            /home/claude/claude-wrapper "$@"
        docker commit "$TEMP_CONTAINER" "$IMAGE_NAME" >/dev/null
        docker rm -f "$TEMP_CONTAINER" >/dev/null
    fi
    exit 0
fi


if [[ "${1:-}" == "shell" ]]; then
    docker run -it --rm \
        -w /workspace \
        -v "$PROJECT_DIR":/workspace \
        -v "$CLAUDE_DATA_DIR":/home/$DOCKER_USER/.claude \
        -v "$HOME/.npmrc:/home/$DOCKER_USER/.npmrc:ro" \
        -v "$HOME/.ssh:/home/$DOCKER_USER/.ssh:ro" \
        --entrypoint bash \
        "$IMAGE_NAME"
    exit 0
fi

if [[ "${1:-}" == "clean" ]]; then
    shift
    if [[ "${1:-}" == "--all" || "${1:-}" == "-a" ]]; then
        echo -e "${YELLOW}🧹 Deep cleaning ClaudeBox and build cache...${NC}"
        docker rmi -f "$IMAGE_NAME" 2>/dev/null || true
        docker builder prune -af  # -a removes ALL build cache
        echo -e "${GREEN}Deep clean complete!${NC}"
    else
        echo -e "${YELLOW}Cleaning ClaudeBox...${NC}"
        docker rmi -f "$IMAGE_NAME" 2>/dev/null || true
        docker builder prune -f   # Only dangling build cache
        echo -e "${GREEN}Clean complete!${NC}"
    fi
    docker system df
    exit 0
fi

if [[ "${1:-}" == "help" ]]; then
    # claudebox help -> show our help
    echo -e "${CYAN}ClaudeBox - The Ultimate Claude Code Development Environment${NC}"
    echo
    echo -e "${YELLOW}Usage:${NC}"
    echo -e "  claudebox [options]              Launch Claude CLI"
    echo -e "  claudebox profile [names...]     Install language profiles"
    echo -e "  claudebox install <packages>     Install apt packages"
    echo -e "  claudebox shell                  Open bash shell in container"
    echo -e "  claudebox info                   Show ClaudeBox information"
    echo -e "  claudebox update                 Update Claude CLI"
    echo -e "  claudebox clean                  Remove ClaudeBox image"
    echo -e "  claudebox rebuild                Rebuild Docker image"
    echo -e "  claudebox help                   Show this help message"
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo -e "  claudebox --model opus -c"
    echo -e "  claudebox profile c python"
    echo
    exit 0
fi

if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
    # --help or -h -> show Claude's help
    if docker image inspect "$IMAGE_NAME" &>/dev/null; then
        docker run --rm "$IMAGE_NAME" --help | sed '1s/claude/claudebox/g'
        echo
        echo -e "${CYAN}For ClaudeBox-specific help, use: claudebox help${NC}"
    else
        echo -e "${CYAN}ClaudeBox - Claude Code Docker Environment${NC}"
        echo
        echo -e "${YELLOW}First run setup required!${NC}"
        echo "Run script without arguments first to build the Docker image."
        echo
    fi
    exit 0
fi

USER_ARGS=("$@")
REQUIRED_ARG="--dangerously-skip-permissions"
FINAL_ARGS=("${USER_ARGS[@]}" "$REQUIRED_ARG")

mkdir -p "$CLAUDE_DATA_DIR"

# Check if image exists
first_time=false
if ! docker image inspect "$IMAGE_NAME" >/dev/null 2>&1; then
    logo

cat > "$DOCKERFILE" <<'EOF'
FROM debian:bookworm

ARG USER_ID
ARG GROUP_ID
ARG USERNAME
ARG NODE_VERSION

# Prevent service startup in Docker
RUN echo '#!/bin/sh\nexit 101' > /usr/sbin/policy-rc.d && \
    chmod +x /usr/sbin/policy-rc.d

# Install base dependencies
RUN export DEBIAN_FRONTEND=noninteractive && \
    apt-get update -qq && \
    apt-get install -y -qq \
    curl gnupg ca-certificates sudo git \
    && apt-get clean

# Create user with matching UID/GID (without sudo restrictions)
RUN groupadd -g $GROUP_ID $USERNAME || true \
    && useradd -m -u $USER_ID -g $GROUP_ID -s /bin/bash $USERNAME \
    && echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

# Install basic development tools
RUN export DEBIAN_FRONTEND=noninteractive && \
    apt-get update -qq && \
    apt-get install -y -qq \
    build-essential git wget curl unzip file vim nano \
    jq make less rsync openssh-client \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Switch to user for NVM installation
USER $USERNAME
WORKDIR /home/$USERNAME

# Install NVM
ENV NVM_DIR="/home/$USERNAME/.nvm"
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash

# Install Node.js using NVM (configurable version)
RUN bash -c "source $NVM_DIR/nvm.sh && \
    if [[ '$NODE_VERSION' == '--lts' ]]; then \
        nvm install --lts && \
        nvm alias default 'lts/*'; \
    else \
        nvm install $NODE_VERSION && \
        nvm alias default $NODE_VERSION; \
    fi && \
    nvm use default"

# Add NVM to bashrc for persistence
RUN echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc && \
    echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.bashrc && \
    echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> ~/.bashrc

# Install Claude CLI using NVM's node
RUN bash -c "source $NVM_DIR/nvm.sh && \
    nvm use default && \
    npm install -g @anthropic-ai/claude-code"

# Verify installation
RUN bash -c "source $NVM_DIR/nvm.sh && claude --version"

# Create a wrapper script for Claude that loads NVM
RUN echo '#!/bin/bash' > ~/claude-wrapper && \
    echo 'export NVM_DIR="$HOME/.nvm"' >> ~/claude-wrapper && \
    echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/claude-wrapper && \
    echo 'exec claude "$@"' >> ~/claude-wrapper && \
    chmod +x ~/claude-wrapper

WORKDIR /workspace

# Use the wrapper as entrypoint
ENTRYPOINT ["/home/claude/claude-wrapper"]
EOF


# Animated progress during build
    for i in {0..100..5}; do
        progress_install "Docker image" $i
        sleep 0.1
    done &
    PROGRESS_PID=$!

    docker build \
        --build-arg USER_ID=$USER_ID \
        --build-arg GROUP_ID=$GROUP_ID \
        --build-arg USERNAME=$DOCKER_USER \
        --build-arg NODE_VERSION="$NODE_VERSION" \
        -f "$DOCKERFILE" -t "$IMAGE_NAME" "$PROJECT_DIR" 2>&1 >/dev/null

    kill $PROGRESS_PID 2>/dev/null
    progress_install "Docker image" 100
    echo -e "\n${GREEN}Complete!${NC}\n"

    docker build \
        --build-arg USER_ID=$USER_ID \
        --build-arg GROUP_ID=$GROUP_ID \
        --build-arg USERNAME=$DOCKER_USER \
        -f "$DOCKERFILE" -t "$IMAGE_NAME" "$PROJECT_DIR" 2>&1 | \
        grep -v 'invoke-rc.d' | grep -v 'policy-rc.d' || true

    rm -f "$DOCKERFILE"

    echo -e "${GREEN}Docker image '$IMAGE_NAME' built with NVM and Node.js 23!${NC}"
    first_time=true
fi

# Install global symlink if needed (this is the only other place that might need sudo)
if [[ ! -L "$LINK_TARGET" ]]; then
    if [[ -w "$(dirname "$LINK_TARGET")" ]]; then
        # We can write to /usr/local/bin without sudo
        ln -s "$SCRIPT_PATH" "$LINK_TARGET"
        echo -e "${GREEN}'claudebox' is now globally available!${NC}"
    else
        # We need sudo for the symlink
        echo -e "${BLUE}Installing global symlink...${NC}"
        echo -e "${YELLOW}Creating symlink in /usr/local/bin requires sudo...${NC}"
        sudo ln -s "$SCRIPT_PATH" "$LINK_TARGET"
        echo -e "${GREEN}'claudebox' is now globally available!${NC}"
    fi
fi

# Show welcome message on first run
if [[ "$first_time" == true ]]; then
    echo
    echo -e "${CYAN}ClaudeBox Setup Complete!${NC}"
    echo
    echo -e "${GREEN}Quick Start:${NC}"
    echo -e "  ${YELLOW}claudebox [options]${NC}        # Launch Claude CLI"
    echo
    echo -e "${GREEN}Power Features:${NC}"
    echo -e "  ${YELLOW}claudebox profile${NC}                # See all language profiles"
    echo -e "  ${YELLOW}claudebox profile c openwrt${NC}      # Install C + OpenWRT tools"
    echo -e "  ${YELLOW}claudebox profile python ml${NC}      # Install Python + ML stack"
    echo -e "  ${YELLOW}claudebox install <packages>${NC}     # Install additional apt packages"
    echo -e "  ${YELLOW}claudebox shell${NC}                  # Open bash shell in container"
    echo
    echo -e "${PURPLE}Just install the profile you need and start coding!${NC}"
    exit 0
fi

# Run Claude in Docker
docker run -it --rm \
    -w /workspace \
    -v "$PROJECT_DIR":/workspace \
    -v "$CLAUDE_DATA_DIR":/home/$DOCKER_USER/.claude \
    -v "$HOME/.claude.json":/home/$DOCKER_USER/.claude.json \
    -v "$HOME/.npmrc:/home/$DOCKER_USER/.npmrc:ro" \
    -v "$HOME/.ssh:/home/$DOCKER_USER/.ssh:ro" \
    -e "NODE_ENV=${NODE_ENV:-production}" \
    -e "ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}" \
    --network host \
    "$IMAGE_NAME" "${FINAL_ARGS[@]}"
