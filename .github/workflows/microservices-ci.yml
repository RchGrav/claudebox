name: Microservices CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/**'
      - 'docker-compose*.yml'
      - '.github/workflows/microservices-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'services/**'
      - 'docker-compose*.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/claudebox

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.detect.outputs.services }}
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed services
        id: detect
        run: |
          # Detect which services have changes
          SERVICES=$(git diff --name-only HEAD^ HEAD | grep '^services/' | cut -d'/' -f2 | sort -u | tr '\n' ' ')
          if [ -z "$SERVICES" ]; then
            echo "No service changes detected"
            echo "services=" >> $GITHUB_OUTPUT
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            echo "Changed services: $SERVICES"
            # Convert to JSON array for matrix
            MATRIX=$(echo $SERVICES | jq -R -s -c 'split(" ") | map(select(length > 0))')
            echo "services=$SERVICES" >> $GITHUB_OUTPUT
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          fi

  test:
    needs: detect-changes
    if: needs.detect-changes.outputs.services != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run tests for ${{ matrix.service }}
        run: |
          if [ -f "services/${{ matrix.service }}/Makefile" ]; then
            make -C services/${{ matrix.service }} test
          elif [ -f "services/${{ matrix.service }}/package.json" ]; then
            cd services/${{ matrix.service }}
            npm install
            npm test
          elif [ -f "services/${{ matrix.service }}/requirements.txt" ]; then
            cd services/${{ matrix.service }}
            python -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            pip install pytest
            pytest
          fi

  build:
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.services != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker compose version

      - name: Run integration tests
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to start
          docker compose -f docker-compose.test.yml run integration-tests
        env:
          COMPOSE_PROJECT_NAME: claudebox-test

      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down -v

  deploy-staging:
    needs: integration-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Update Kubernetes manifests
        run: |
          # Update image tags in k8s manifests
          for service in ${{ needs.detect-changes.outputs.services }}; do
            sed -i "s|image: .*${service}:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${service}:main-${GITHUB_SHA::8}|g" k8s/staging/${service}-deployment.yaml
          done

      - name: Commit and push manifest updates
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add k8s/staging/
          git commit -m "Update staging manifests for ${GITHUB_SHA::8}" || exit 0
          git push

  deploy-production:
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Promote to production
        run: |
          echo "Manual approval required for production deployment"
          # ArgoCD or Flux will handle the actual deployment